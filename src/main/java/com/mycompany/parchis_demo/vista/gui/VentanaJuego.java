package com.mycompany.parchis_demo.vista.gui;

import com.mycompany.parchis_demo.control.ControladorTurno;
import com.mycompany.parchis_demo.control.red.ProxyCliente;
import com.mycompany.parchis_demo.modelo.EventoPartida;
import com.mycompany.parchis_demo.modelo.Jugador;
import com.mycompany.parchis_demo.modelo.Partida;
import com.mycompany.parchis_demo.modelo.enums.Color;

/**
 *
 * @author Ana Aguilar
 */
public class VentanaJuego extends javax.swing.JFrame {
    
    private ProxyCliente proxy;
    private ControladorTurno controlador;
    private Jugador jugador;
    private Partida partida;

    
    
    /**
     * CONSTRUCTOR:
     * 
     * Creates new form VentanaJuego
     */
    public VentanaJuego() {
        initComponents();
        
        
        // LÓGICA USADA EN CONSOLA ADAPTADA A INTERFAZ:
        // Configuración inicial del jugador y partida:

        jugador = new Jugador(0, "Candy", "avatar1.png", Color.ROJO);
        partida = new Partida("P001");
        partida.agregarJugador(jugador);

        // Conectar al broker (IP del servidor)
        proxy = new ProxyCliente();
        proxy.conectar("IP", 5000); // EN IP PON LA IP DE TU COMPU
        proxy.setManejadorEventos(this::actualizarVista);

        // Crear el controlador que usará el jugador
        controlador = new ControladorTurno(partida, proxy);

        System.out.println("[VentanaJuego] Jugador conectado al broker");
    }

    /**
     * Actualiza la interfaz gráfica cuando llega un evento desde el broker.
     * En esta parte se podrá refrescar labels, mover fichas, mostrar mensajes, etc, los eventos:
     * Es solo de prueba, lo pueden mover y actualizar.
     */
    private void actualizarVista(EventoPartida evento) {
        if (evento == null) return;

        switch (evento.getTipoEvento()) {
            case FICHA_MOVIDA:
                System.out.println("[GUI] " + evento.getMensaje());
                // Aquí se implementa lo de mover gráficamente la ficha.
                break;

            case TURNO_CAMBIADO:
                System.out.println("[GUI] " + evento.getMensaje());
                // Aquí se implementa lo de habilitar o deshabilitar el botón de turno
                break;

            default:
                System.out.println("[GUI Evento] " + evento.getMensaje());
                break;
        }
    }
  
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents




    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaJuego().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
